similarity_matrix=np.zeros([len(sentence_tokens),len(sentence_tokens)])
for i,row_embedding in enumerate(sentence_embeddings):
    for j,column_embedding in enumerate(sentence_embeddings):
        similarity_matrix[i][j]=1-spatial.distance.cosine(row_embedding,column_embedding)

nx_graph=nx.from_numpy_array(similarity_matrix)
scores=nx.pagerank(nx_graph,max_iter=600)

top_sentence={sentence:scores[index] for index,sentence in enumerate(sentences)}
sentNeeded=round(0.25*len(sentences))-1
top=dict(sorted(top_sentence.items(),key=lambda x:x[1],reverse=True)[:sentNeeded])

summary= ""
for sent in sentences:
    if sent in top.keys():
        summary +=sent
print(summary)
